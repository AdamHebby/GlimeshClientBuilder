#!/bin/env php
<?php

use GlimeshClientBuilder\BuilderConfig;
use GlimeshClientBuilder\Builder;

require_once __DIR__ . '/../vendor/autoload.php';

$acceptedDocNames = [
    "author",
    "category",
    "copyright",
    "deprecated",
    "example",
    "ignore",
    "internal",
    "license",
    "link",
    "method",
    "package",
    "property",
    "property-read",
    "property-write",
    "see",
    "since",
    "source",
    "subpackage",
    "todo",
    "uses",
    "version",
];

$requiredArgs = ['schema', 'output', 'namespace'];
$args = getopt(
    '', [
        'help',
        ...array_map(fn($arg) => "$arg:", $requiredArgs),
        ...array_map(fn($arg) => "doc-$arg:", $acceptedDocNames),
    ]);


$welcome = <<<WELCOME
 - Glimesh Client Model Builder -
Uses the Glimesh GraphQL Schema to generate PHP classes.


WELCOME;

$usageHelp = <<<HELP
Usage:
    php bin/glimbuild --schema=<filepath.json> --output=<path/to/directory/> --namespace=<NameSpace>

Options:
    --help                         Show this help message
    --schema=<filepath.json>       The schema to build from
    --output=<path/to/directory/>  The output directory to write to
    --namespace=<NameSpace>        The output namespace to map classes to
    --doc-<name>=<value>           Set a custom class-level doc value. Allows one of:
                                   author, category, copyright, deprecated, example,
                                   ignore, internal, license, link, method, package,
                                   property, property-read, property-write, see, since,
                                   source, subpackage, todo, uses, version

HELP;

$docBlock = [];

foreach ($args as $argKey => $arg) {
    if (substr($argKey, 0, 4) === 'doc-') {
        $name = substr($argKey, 4);
        if (!in_array($name, $acceptedDocNames)) {
            echo "Invalid doc name: $name\n";
            exit(1);
        }
        $docBlock[$name] = " * @{$name} " . $args[$argKey];
    }
}

if (isset($args['help'])) {
    echo "{$welcome}\n";
    echo "{$usageHelp}\n";
    exit(0);
}

foreach ($requiredArgs as $arg) {
    if (!isset($args[$arg]) || empty($args[$arg])) {
        echo "Error: Missing or empty '$arg' argument \n\n";
        echo "{$usageHelp}\n";
        exit(1);
    }
}

if (!file_exists($args['output']) || !is_dir($args['output'])) {
    echo "Error: Invalid 'output' path {$args['output']} - Either doesn't exist or is not a directory \n\n";
    echo "{$usageHelp}\n";
    exit(1);
}

if (!file_exists($args['schema']) || !is_file($args['schema'])) {
    echo "Error: Invalid 'schema' path {$args['schema']} - Either doesn't exist or is not a file \n\n";
    echo "{$usageHelp}\n";
    exit(1);
}

$outputDir  = realpath($args['output']);
$schemaFile = realpath($args['schema']);
$namespace  = rtrim($args['namespace'], '\\');

$config = (new BuilderConfig())
    ->setApiJsonFilePath($schemaFile)
    ->setOutputDirectory($outputDir)
    ->setNamespace($namespace)
    ->setStandardDocBlock($docBlock);

(new Builder($config))->build();
